generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  FINISHED
  IN_PROGRESS
  STALLED
}

enum StackCategory {
  FRONT_END
  BACK_END
  FULL_STACK
}

enum StackType {
  LANGUAGE
  FRAMEWORK
  LIBRARY
  DATABASE
  TOOL
}

model Project {
  id            Int           @id @default(autoincrement())
  key           String        @unique
  name          String
  status        ProjectStatus
  stack         StackCategory
  startDate     DateTime      @map("start_date")
  endDate       DateTime?     @map("end_date")
  description   String
  goals         String[]
  contributions String[]      @map("contribution")
  logoUrl       String        @map("logo_url")
  primaryColor  String        @map("primary_color")
  demoUrl       String?       @map("demo_url")
  githubUrl     String?       @map("github_url")
  techStacks    Stack[]       @relation("ProjectStacks")
  collaborators Colaborator[] @relation("ProjectColaborators")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
}

model Stack {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  category    StackCategory?
  type        StackType?
  iconUrl     String          @map("icon_url")
  projects    Project[]       @relation("ProjectStacks")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")

  // Relation for stacks originating from this stack
  relatedFrom RelatedStack[]  @relation("RelatedStacksFrom")

  // Relation for stacks pointing to this stack
  relatedTo   RelatedStack[]  @relation("RelatedStacksTo")
}

model RelatedStack {
  id         Int    @id @default(autoincrement())
  fromStack  Int
  toStack    Int

  // Relation with Stack as the source
  fromStackStack Stack @relation("RelatedStacksFrom", fields: [fromStack], references: [id])

  // Relation with Stack as the destination
  toStackStack   Stack @relation("RelatedStacksTo", fields: [toStack], references: [id])
}

model Colaborator {
  id               Int       @id @default(autoincrement())
  nickname         String    @unique
  githubUsername   String?   @map("github_username")
  linkedinUsername String?   @map("linkedin_username")
  project          Project[] @relation("ProjectColaborators")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
}
