---
import type { GetStaticPaths } from 'astro';

import moment from 'moment';

import { MessageDisplay } from '@/components/atoms/message-display';
import Layout from '@/components/template/base.astro';
import { ProjectAccordion } from '@/components/organisms/accordion/project-accordion';
import { Breadcrumb, type IBreadCrumb } from '@/components/organisms/breadcrumb';
import { ENV } from '@/constants/env';
import { ProjectDetailsStyles } from '@/constants/app-styles';
import {
  PROJECT_STATUS_TRANSCRIPTIONS,
  STACK_CATEGORY_TRANSCRIPTIONS,
} from '@/constants/transcriptions';
import { GetTextColorForBackground, SetHexColorTransparency } from '@/helpers/common/color';
import { isDefined } from '@/helpers/guards/is-defined';
import { getCollaboratorsByAssociatedProjects } from '@/services/collaborator/getCollaboratorsByAssociatedProjects';
import { getAllProjects } from '@/services/project/getAllProjects';
import { getProjectByKey } from '@/services/project/getProjectByKey';
import { getStacksByAssociatedProjects } from '@/services/stack/getStacksByAssociatedProjects';

// MARK: - Static paths
export const getStaticPaths = (async () => {
  const projects = await getAllProjects();

  return projects.map((project) => ({
    params: { key: project.key },
    props: project,
  }));
}) satisfies GetStaticPaths;

// MARK: - Fetching project data
let project;

if (ENV.isServerSideEnable) {
  project = await getProjectByKey({
    key: Astro.params.key,
  });
} else {
  project = Astro.props;
}

if (!project) {
  return {
    status: 404,
    error: new Error('Project not found'),
  };
}

// MARK: - Fetching associated data
const associatedStacks = await getStacksByAssociatedProjects({
  idProject: project.id,
});
const associatedCollaborators = await getCollaboratorsByAssociatedProjects({
  idProject: project.id,
});

const { StackStyle, StatusStyle } = ProjectDetailsStyles;

const BreadCrumbItems: IBreadCrumb[] = [
  {
    label: 'Proyectos',
    href: '/projects',
  },
  {
    label: project.name,
  },
];

const textColor = GetTextColorForBackground(project.primaryColor);
---

<Layout
  body={{
    class: 'bg-background dark:bg-background-dark',
  }}
  title={project.name}
>
  <div class='px-16 py-14'>
    <header class='mb-2'>
      <Breadcrumb className='relative z-50 text-white' items={BreadCrumbItems} />
    </header>
    <div class='fixed inset-0 z-10'>
      <div
        class='absolute inset-0'
        style={`background: linear-gradient(90deg, ${project.primaryColor} 40%, ${SetHexColorTransparency(project.primaryColor, 0.5)} 40%, rgba(255,255,255,0) 100%);`}
      >
      </div>
      <div
        class='absolute inset-0'
        style={`background: linear-gradient(120deg, ${project.primaryColor} 15%, ${SetHexColorTransparency(project.primaryColor, 0.5)} 50%, rgba(255,255,255,0) 100%);`}
      >
      </div>
    </div>
    <main class='flex h-full text-black dark:text-white'>
      <section
        class:list={[
          'relative z-50 flex h-full flex-1 flex-col',
          {
            '!text-white': textColor === 'white',
            '!text-black': textColor === 'black',
          },
        ]}
      >
        <article>
          <h1
            class='scroll-m-20 text-5xl font-extrabold tracking-tight'
            transition:name={`${project.key} Title`}
          >
            {project.name}
          </h1>
          <div class='my-2 flex items-center gap-2 text-lg font-light'>
            <h2 class:list={StatusStyle[project.status]} class='font-medium leading-none'>
              {PROJECT_STATUS_TRANSCRIPTIONS[project.status]}
            </h2>
            <small class='rounded-md p-1 text-base capitalize leading-none'>
              {moment(project.startDate).locale('es').format('MMM YYYY')}
              {' - '}
              {
                isDefined(project.endDate)
                  ? moment(project.endDate).locale('es').format('MMM YYYY')
                  : 'Actualidad'
              }
            </small>
            <h3
              class:list={[StackStyle[project.stackCategory]]}
              class='rounded-md p-1 text-base font-medium leading-none'
            >
              {STACK_CATEGORY_TRANSCRIPTIONS[project.stackCategory]}
            </h3>
          </div>
          <p class='text-pretty'>
            <MessageDisplay message={project.description} />
          </p>
        </article>
        <article class='mt-5 flex-1'>
          <ProjectAccordion
            client:load
            collaborators={associatedCollaborators}
            contributions={project.contributions}
            demoUrl={project.demoUrl}
            githubUrl={project.githubUrl}
            goals={project.goals}
            stackCategory={associatedStacks}
          />
        </article>
      </section>
      <section class='relative flex flex-1 items-center justify-center'>
        <article class='fixed top-0 z-0 flex aspect-video h-full items-center justify-center'>
          <!-- TO-DO: project.previewImageURL -->
          <img
            alt={`${project.name} preview image`}
            class='size-full'
            src=''
            style={`background-color: ${project.primaryColor};`}
          />
        </article>
      </section>
    </main>
  </div>
</Layout>
