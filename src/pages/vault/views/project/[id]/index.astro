---
import type { GetStaticPaths } from 'astro';

import Layout from '@/components/template/base.astro';
import { DashboardLayout } from '@/components/template/dashboard-layout';
import { ShowProjectForm } from '@/components/organisms/form/show/project';
import { CollaboratorRelationShipCard } from '@/components/molecules/cards/collaborator-relationship-card';
import { Card, CardHeader } from '@/components/ui/card';
import { DASHBOARD_BREADCRUMB_TEMPLATE } from '@/constants/dashboard-breadcrumb';
import { ENV } from '@/constants/env';
import { getCollaboratorsByAssociatedProjects } from '@/services/collaborator/getCollaboratorsByAssociatedProjects';
import { getAllProjects } from '@/services/project/getAllProjects';
import { getProjectById } from '@/services/project/getProjectById';
import { getStacksByAssociatedProjects } from '@/services/stack/getStacksByAssociatedProjects';

// MARK: - Static paths
export const getStaticPaths = (async () => {
  const projects = await getAllProjects();

  const paths = projects.map((project) => ({
    params: { id: project.id },
    props: project,
  }));

  return paths;
}) satisfies GetStaticPaths;

// MARK: - Fetching project data
let project;

if (ENV.isServerSideEnable) {
  project = await getProjectById({
    id: Number(Astro.params.id),
  });
} else {
  project = Astro.props;
}

if (!project) {
  return {
    status: 404,
    error: new Error('Project not found'),
  };
}

// MARK: - Fetching associated data
const associatedStacks = await getStacksByAssociatedProjects({
  idProject: project.id,
});
const associatedCollaborators = await getCollaboratorsByAssociatedProjects({
  idProject: project.id,
});
---

<Layout title={`Explora el proyecto ${project.name}`}>
  <DashboardLayout
    client:load
    breadcrumb={DASHBOARD_BREADCRUMB_TEMPLATE['/vault/views/project/details']}
  >
    <main class='container mx-auto flex size-full flex-col gap-5 pl-7 pt-7'>
      <h1 class='text-4xl font-medium'>Detalles de Proyecto</h1>
      <ShowProjectForm client:load currentProject={project} />
      <div class='mt-10'>
        <h2 class='text-3xl font-medium'>Relaciones</h2>
        <div class='mx-5 mt-5'>
          <h3 class='text-3xl font-medium'>Stack</h3>
          <ul class='mt-4 flex flex-wrap gap-4'>
            {
              associatedStacks?.map((stack) => (
                <li>
                  <Card className='my-5 flex w-max flex-col items-center justify-center rounded-lg bg-zinc-300 shadow dark:bg-zinc-800'>
                    <CardHeader className='relative'>
                      <img
                        alt={`${stack.name} logo`}
                        class='size-20 rounded-lg'
                        src={stack.iconUrl}
                      />
                    </CardHeader>
                  </Card>
                </li>
              ))
            }
          </ul>
        </div>
        <div class='mx-5 mt-5'>
          <h3 class='text-3xl font-medium'>Colaboradores</h3>
          <ul class='mt-4 flex flex-wrap gap-4'>
            {
              associatedCollaborators?.map((collaborator) => (
                <CollaboratorRelationShipCard client:load collaborator={collaborator} />
              ))
            }
          </ul>
        </div>
      </div>
    </main>
  </DashboardLayout>
</Layout>
