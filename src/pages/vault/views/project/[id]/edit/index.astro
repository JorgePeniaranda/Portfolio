---
import type { GetStaticPaths } from 'astro';

import Layout from '@/components/template/base.astro';
import { DashboardLayout } from '@/components/template/dashboard-layout';
import { UpdateCollaboratorRelatedToProject } from '@/components/organisms/form/relationship/update-collaborators-related-to-projects';
import { UpdateStacksRelatedToProject } from '@/components/organisms/form/relationship/update-stacks-related-to-projects';
import { UpdateProjectForm } from '@/components/organisms/form/update/project';
import { DASHBOARD_BREADCRUMB_TEMPLATE } from '@/constants/dashboard-breadcrumb';
import { ENV } from '@/constants/env';
import { getCollaboratorsByAssociatedProjects } from '@/services/collaborator/getCollaboratorsByAssociatedProjects';
import { getCollaboratorsByNotAssociatedProjects } from '@/services/collaborator/getCollaboratorsByNotAssociatedProjects';
import { getAllProjects } from '@/services/project/getAllProjects';
import { getProjectById } from '@/services/project/getProjectById';
import { getStacksByAssociatedProjects } from '@/services/stack/getStacksByAssociatedProjects';
import { getStacksByNotAssociatedProjects } from '@/services/stack/getStacksByNotAssociatedProjects';

// MARK: - Static paths
export const getStaticPaths = (async () => {
  const projects = await getAllProjects();

  const paths = projects.map((project) => ({
    params: { id: project.id },
    props: project,
  }));

  return paths;
}) satisfies GetStaticPaths;

// MARK: - Fetching project data
let project;

if (ENV.isServerSideEnable) {
  project = await getProjectById({
    id: Number(Astro.params.id),
  });
} else {
  project = Astro.props;
}

if (!project) {
  return {
    status: 404,
    error: new Error('Project not found'),
  };
}

// MARK: - Fetching associated data
const relatedStacks = await getStacksByAssociatedProjects({
  idProject: project.id,
});
const relatedCollaborators = await getCollaboratorsByAssociatedProjects({
  idProject: project.id,
});
const availableStacks = await getStacksByNotAssociatedProjects({
  idProject: project.id,
});
const availableCollaborators = await getCollaboratorsByNotAssociatedProjects({
  idProject: project.id,
});
---

<Layout title={`Editar proyecto ${project.name}`}>
  <DashboardLayout
    client:load
    breadcrumb={DASHBOARD_BREADCRUMB_TEMPLATE['/vault/views/project/edit']}
  >
    <main class='container mx-auto flex size-full flex-col gap-5 pl-7 pt-7'>
      <h1 class='text-4xl font-medium'>Editar de Proyecto</h1>
      <UpdateProjectForm client:load currentProject={project} />
      <div class='mt-10'>
        <h2 class='text-3xl font-medium'>Editar relaciones</h2>
        <div class='mx-5 mt-5'>
          <h3 class='text-3xl font-medium'>Stack</h3>
          <UpdateStacksRelatedToProject
            client:load
            associatedStacks={relatedStacks}
            availableStacks={availableStacks}
            currentProject={project}
          />
        </div>
        <div class='mx-5 mt-5'>
          <h3 class='text-3xl font-medium'>Colaboradores</h3>
          <UpdateCollaboratorRelatedToProject
            client:load
            associatedCollaborators={relatedCollaborators}
            availableCollaborators={availableCollaborators}
            currentProject={project}
          />
        </div>
      </div>
    </main>
  </DashboardLayout>
</Layout>
