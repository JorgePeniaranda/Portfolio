---
import Layout from '@/components/layouts/base.astro'
import { DashboardLayout } from '@/components/layouts/dashboard-layout'
import { UpdateCollaboratorRelatedToProject } from '@/components/organisms/form/relationship/update-collaborators-related-to-projects'
import { UpdateStacksRelatedToProject } from '@/components/organisms/form/relationship/update-stacks-related-to-projects'
import { UpdateProjectForm } from '@/components/organisms/form/update/project'
import { DASHBOARD_BREADCRUMB_TEMPLATE } from '@/constants/breadcrumb'
import { ENV } from '@/constants/env'
import { getCollaboratorsByAssociatedProjects } from '@/services/collaborator/getCollaboratorsByAssociatedProjects'
import { getCollaboratorsByNotAssociatedProjects } from '@/services/collaborator/getCollaboratorsByNotAssociatedProjects'
import { getAllProjects } from '@/services/project/getAllProjects'
import { getProjectById } from '@/services/project/getProjectById'
import { getStacksByAssociatedProjects } from '@/services/stack/getStacksByAssociatedProjects'
import { getStacksByNotAssociatedProjects } from '@/services/stack/getStacksByNotAssociatedProjects'
import type { GetStaticPaths } from 'astro'

// MARK: - Static paths
export const getStaticPaths = (async () => {
  const projects = await getAllProjects()

  const paths = projects.map(project => ({
    params: { id: project.id },
    props: project
  }))

  return paths
}) satisfies GetStaticPaths

// MARK: - Fetching project data
let project
if (ENV.isServerSideEnable) {
  project = await getProjectById({
    id: Number(Astro.params.id)
  })
} else {
  project = Astro.props
}

if (!project) {
  return {
    status: 404,
    error: new Error('Project not found')
  }
}

// MARK: - Fetching associated data
const relatedStacks = await getStacksByAssociatedProjects({
  idProject: project.id
})
const relatedCollaborators = await getCollaboratorsByAssociatedProjects({
  idProject: project.id
})
const availableStacks = await getStacksByNotAssociatedProjects({
  idProject: project.id
})
const availableCollaborators = await getCollaboratorsByNotAssociatedProjects({
  idProject: project.id
})
---

<Layout title={`Editar proyecto ${project.name}`}>
  <DashboardLayout
    breadcrumb={DASHBOARD_BREADCRUMB_TEMPLATE['/vault/views/project/edit']}
    client:load
  >
    <main class="w-full h-full flex flex-col pt-7 pl-7 container mx-auto gap-5">
      <h1 class="text-4xl font-medium">Editar de Proyecto</h1>
      <UpdateProjectForm
        currentProject={project}
        client:load
      />
      <div class="mt-10">
        <h2 class="text-3xl font-medium">Editar relaciones</h2>
        <div class="mx-5 mt-5">
          <h3 class="text-3xl font-medium">Stack</h3>
          <UpdateStacksRelatedToProject
            associatedStacks={relatedStacks}
            availableStacks={availableStacks}
            currentProject={project}
            client:load
          />
        </div>
        <div class="mx-5 mt-5">
          <h3 class="text-3xl font-medium">Colaboradores</h3>
          <UpdateCollaboratorRelatedToProject
            associatedCollaborators={relatedCollaborators}
            availableCollaborators={availableCollaborators}
            currentProject={project}
            client:load
          />
        </div>
      </div>
    </main>
  </DashboardLayout>
</Layout>
