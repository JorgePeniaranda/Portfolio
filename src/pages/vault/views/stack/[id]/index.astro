---
import type { GetStaticPaths } from 'astro';

import Layout from '@/components/template/base.astro';
import { DashboardLayout } from '@/components/template/dashboard-layout';
import { ShowStackForm } from '@/components/organisms/form/show/stack';
import { Card, CardHeader } from '@/components/ui/card';
import { DASHBOARD_BREADCRUMB_TEMPLATE } from '@/constants/dashboard-breadcrumb';
import { ENV } from '@/constants/env';
import { isNotDefined } from '@/helpers/guards/is-defined';
import { getProjectsByAssociatedStack } from '@/services/project/getProjectsByAssociatedStack';
import { getAllStack } from '@/services/stack/getAllStack';
import { getStackById } from '@/services/stack/getStackById';

// MARK: - Static paths
export const getStaticPaths = (async () => {
  const stacks = await getAllStack();

  const paths = stacks.map((stack) => ({
    params: { id: stack.id },
    props: stack,
  }));

  return paths;
}) satisfies GetStaticPaths;

// MARK: - Fetching stack data
let stack;

if (ENV.isServerSideEnable) {
  stack = await getStackById({ id: Number(Astro.params.id) });
} else {
  stack = Astro.props;
}

if (!stack) {
  return {
    status: 404,
    error: new Error('Stack not found'),
  };
}

// MARK: - Fetching associated data
const associatedProjects = await getProjectsByAssociatedStack({
  idStack: stack.id,
});
---

<Layout title={`Explora el stack ${stack.name}`}>
  <DashboardLayout
    client:load
    breadcrumb={DASHBOARD_BREADCRUMB_TEMPLATE['/vault/views/project/details']}
  >
    <main class='container mx-auto flex size-full flex-col gap-5 pt-7 pl-7'>
      <h1 class='text-4xl font-medium'>Detalles de Stack</h1>
      <ShowStackForm client:load currentStack={stack} />
      <div class='mt-10'>
        <h2 class='text-3xl font-medium'>Relaciones</h2>
        <div class='mx-5 mt-5'>
          <h3 class='text-3xl font-medium'>Proyectos</h3>
          <ul class='mt-4 flex flex-wrap gap-4'>
            {
              associatedProjects?.map((project) => (
                <li>
                  <Card className='my-5 flex flex-col items-center justify-center rounded-lg bg-zinc-300 shadow-sm dark:bg-zinc-800'>
                    <CardHeader className='relative flex items-center gap-2'>
                      <img
                        alt={`${project.name} logo`}
                        class='size-16 shrink-0'
                        src={project.logoUrl}
                      />
                      <span class='text-lg capitalize'>{project.name}</span>
                    </CardHeader>
                  </Card>
                </li>
              ))
            }
            {
              (isNotDefined(associatedProjects) || associatedProjects?.length === 0) && (
                <p class='indent-2 text-lg text-gray-500'>No hay proyectos asociados</p>
              )
            }
          </ul>
        </div>
      </div>
    </main>
  </DashboardLayout>
</Layout>
